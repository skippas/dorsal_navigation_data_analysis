# Chunk 2
rm(list = ls())
source("loading_cleaning.R")
# Chunk 3: data across experiments
# Chunk 4
# clearly trial number needs to be based per individual.
# A note also needs to be made that there was a training phase
# and finally, some individuals came into experiment later and may have missed training phase?
# Where did the blocks occur? This might affect learning.
# remove illegible handwriting.
# order individuals lowest to highest
# tile plot ####
facet_labels <- c(thin_stripes = "multiple thin 45 degree stripes",
thick_stripe = "single thick stripe",
control = "control")
choices %>% mutate(first = as.character(first),
experiment = factor(
experiment, levels = c("thick_stripe",
"thin_stripes",
"control"))) %>%
ggplot(aes(y = individual, x = rank_trial, fill = first))+
geom_tile()+
facet_wrap(facets = "experiment",  ncol = 1, scales = "free_y",
labeller = labeller(experiment = facet_labels))
# alternate version of above tileplot for vg present ####
perp_para %>%
filter(individual %in% c("13", "51", "53")) %>%
mutate(first = as.character(first),
individual = factor(individual, levels =
c("13", "51", "53")),
stimuli = factor(stimuli, levels = rev(c("test","ctrl"))))
choices %>%
filter(experiment != "thick_stripe") %>%
mutate(first = as.character(first),
individual = factor(individual,
levels = rev(c("2", "11", "31", "32", "33", "51", "55"))),
experiment = factor(
experiment, levels = rev(c("thick_stripe",
"thin_stripes",
"control")))) %>%
ggplot(aes(y = experiment, x = rank_trial, fill = first))+
geom_tile()+
scale_fill_manual(values = c("0" = "#e41a1c", "1" = "#4daf4a"),
breaks = c( "1","0"),
labels = c("Correct", "Incorrect"))+
scale_y_discrete(labels = c("Control", "Test"))+
labs(x = "Trial", y = "Experiment", fill = "First decision")+
facet_wrap(facets = "individual",  ncol = 1, scales = "free_y",
labeller = labeller(individual = ~ paste("Individual: ", .),
.multi_line = F))+
theme_bw()+
theme(legend.position = "top",
panel.grid = element_blank(),
axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14))
ggsave("optflow_tileplot_vg_version.png", plot = last_plot(), width = 6, height = 8, dpi = 300)
# first half of trials versus last half of trials ####
## we need a variable saying which trials are below half of the max and which are above
choices <- choices %>%
group_by(experiment) %>%
mutate(midpoint = ceiling(max(rank_trial) / 2))
# Create a new variable 'trial_half' based on trial_number and experiment
choices <- choices %>%
mutate(trial_half = ifelse(rank_trial <= midpoint, "first_half", "second_half"))
choices %>% group_by(experiment, trial_half, individual) %>%
summarise(proportion_correct = mean(first)) %>%
ggplot(aes(x = individual, y = proportion_correct, fill = trial_half))+
geom_bar(position="dodge", stat="identity")+
facet_wrap(facets = "experiment", ncol = 1)
# if we average over individuals it looks a bit cleaner.
choices %>% group_by(experiment, trial_half) %>%
summarise(proportion_correct = mean(first, na.rm = T)) %>%
ggplot(aes(x = trial_half, fill = trial_half, y = proportion_correct))+
geom_bar(position="dodge", stat="identity")+
facet_wrap(facets = "experiment", ncol = 1)
# To do:
## reorder experiments
## relabel experiments
# average decision accuracies across all trials ####
# overall decision accuracies. this is not a reflection of their optimal decision accuracy as it includes a learning phase and logistic regression seems to suggest there is an effect of trial number
# Calculate the proportion of correct decisions for each experiment
proportion_data <- choices %>%
group_by(experiment) %>%
summarise(proportion_correct = mean(first, na.rm = T),
n = n())
# Calculate the confidence intervals using broom::tidy
# confidence_intervals <- proportion_data %>%
#   mutate(se = sqrt(proportion_correct * (1 - proportion_correct) / n)) %>%
#   tidy(conf.int = TRUE, conf.method = "wald")
# Calculate the confidence intervals
alpha <- 0.95 # Confidence level
z_value <- qnorm((1 + alpha) / 2) # Z-value for confidence interval
proportion_data <- proportion_data %>%
mutate(se = sqrt(proportion_correct * (1 - proportion_correct) / n),
conf_interval = z_value * se)
### Create a bar / point plot with confidence intervals ####
# bar
ggplot(proportion_data, aes(x = experiment, y = proportion_correct)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(aes(ymin = proportion_correct - conf_interval, ymax = proportion_correct + conf_interval),
position = position_dodge(width = 0.8), width = 0.2) +
labs(x = "Experiment", y = "Proportion Correct") +
theme_minimal()
# point and errors
proportion_data %>% filter(experiment != "thick_stripe") %>%
ggplot(aes(x = experiment, y = proportion_correct)) +
geom_point(size = 3)+
geom_hline(yintercept = 0.5, lty = 2)+
scale_y_continuous(labels = scales::percent)+
geom_errorbar(aes(ymin = proportion_correct - conf_interval, ymax = proportion_correct + conf_interval),
position = position_dodge(width = 0.8), width = 0.2) +
labs(x = "Experiment", y = "Percent correct decisions") +
theme_minimal()+
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))+
scale_x_discrete(labels = c("Test", "Control", "Thick stripe"))
ggsave("optflow_point_and_errorbars.png", plot = last_plot(), width = 4, height = 3, dpi = 300)
### base plot effort ####
logit = function(x) log(x/(1-x))
invlogit = function(x) 1/(1+exp(-x))
# Fit logistic regression model for each experiment
m_thick <- glm(first ~ rank_trial,
data = choices[choices$experiment == "thick_stripe",],
family = binomial)
m_thin <- glm(first ~ rank_trial,
data = choices[choices$experiment == "thin_stripes",],
family = binomial)
m_ctrl <- glm(first ~ rank_trial,
data = choices[choices$experiment == "control",],
family = binomial)
# Summary of the model
summary(m_thick)
summary(m_thin)
summary(m_ctrl)
# thin stripe regression
pdf("my_base_plot.pdf", width = 8, height = 6)
thin_x_pred = with(choices[choices$experiment == "thin_stripes", ], seq(from=min(rank_trial), to=max(rank_trial), by=0.01))
with(choices[choices$experiment == "thin_stripes",],
plot(x = c(min(rank_trial), max(rank_trial)),
y = c(0, 1), type = "n", xlab = "Trial", ylab = "Predicted probability of correct decision"))
thin_predicted_probs <- predict(m_thin, newdata=list(rank_trial=thin_x_pred),  type = "response", se.fit = TRUE)
lines(thin_x_pred, thin_predicted_probs$fit)
polygon(c(thin_x_pred, rev(thin_x_pred)),
c(thin_predicted_probs$fit+1.96*thin_predicted_probs$se.fit,
rev(thin_predicted_probs$fit-1.96*thin_predicted_probs$se.fit)),
col = rgb(0,.3,1,.5), border = FALSE)
dev.off()
# thick
x_pred = with(choices[choices$experiment == "thick_stripe", ], seq(from=min(rank_trial), to=max(rank_trial), by=0.01))
with(choices[choices$experiment == "thick_stripe",],
plot(x = c(min(rank_trial), max(rank_trial)),
y = c(0, 1), type = "n", xlab = "Trial", ylab = "Predicted probability of correct decision"))
predicted_probs <- predict(m_thick, newdata=list(rank_trial=x_pred),  type = "response", se.fit = TRUE)
lines(x_pred, predicted_probs$fit)
polygon(c(x_pred, rev(x_pred)),
c(predicted_probs$fit+1.96*predicted_probs$se.fit,
rev(predicted_probs$fit-1.96*predicted_probs$se.fit)),
col = rgb(0,1,0,.5), border = FALSE)
# control
ctrl_x_pred = with(choices[choices$experiment == "control", ], seq(from=min(rank_trial), to=max(rank_trial), by=0.01))
with(choices[choices$experiment == "thick_stripe",],
plot(x = c(min(rank_trial), max(rank_trial)),
y = c(0, 1), type = "n", xlab = "Trial", ylab = "Predicted probability of correct decision"))
ctrl_predicted_probs <- predict(m_ctrl, newdata=list(rank_trial=ctrl_x_pred),  type = "response", se.fit = TRUE)
lines(ctrl_x_pred, ctrl_predicted_probs$fit)
polygon(c(ctrl_x_pred, rev(ctrl_x_pred)),
c(ctrl_predicted_probs$fit+1.96*ctrl_predicted_probs$se.fit,
rev(ctrl_predicted_probs$fit-1.96*ctrl_predicted_probs$se.fit)),
col = rgb(1,0,0,.5), border = FALSE)
rm(ctrl_x_pred, thin_x_pred, thin_predicted_probs, ctrl_predicted_probs,
predicted_probs, x_pred)
thick <- choices %>% filter(experiment == "thick_stripe")
thin <- choices %>% filter(experiment == "thin_stripes")
m_thick <- glm(first ~ rank_trial, data = thick, family = binomial)
m_thin <- glm(first ~ rank_trial, data = thin, family = binomial)
summary(m_thin)
thick$pred_prob <- predict(m_thick, type = "response")
thin$pred_prob <- predict(m_thin, type = "response")
combined_data <- bind_rows(#thick %>% select(first, rank_trial, pred_prob),
thin %>% select(first, rank_trial, pred_prob))
ggplot(combined_data, aes(x = rank_trial, y = pred_prob)) +
geom_smooth(method = "loess", se = FALSE) +
geom_smooth(method = "glm", method.args = list(family = binomial),
fill = "grey", colour = "black", alpha = 0.5) +
geom_hline(yintercept = 0.5, lty = 2)+
labs(x = "Trial", y = "Predicted Probability") +
theme_minimal()+
theme(axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
rm(list = ls())
source("loading_cleaning.R")
# Chunk 3: data across experiments
# Chunk 4
# clearly trial number needs to be based per individual.
# A note also needs to be made that there was a training phase
# and finally, some individuals came into experiment later and may have missed training phase?
# Where did the blocks occur? This might affect learning.
# remove illegible handwriting.
# order individuals lowest to highest
# tile plot ####
facet_labels <- c(thin_stripes = "multiple thin 45 degree stripes",
thick_stripe = "single thick stripe",
control = "control")
choices %>% mutate(first = as.character(first),
experiment = factor(
experiment, levels = c("thick_stripe",
"thin_stripes",
"control"))) %>%
ggplot(aes(y = individual, x = rank_trial, fill = first))+
geom_tile()+
facet_wrap(facets = "experiment",  ncol = 1, scales = "free_y",
labeller = labeller(experiment = facet_labels))
# alternate version of above tileplot for vg present ####
perp_para %>%
filter(individual %in% c("13", "51", "53")) %>%
mutate(first = as.character(first),
individual = factor(individual, levels =
c("13", "51", "53")),
stimuli = factor(stimuli, levels = rev(c("test","ctrl"))))
choices %>%
filter(experiment != "thick_stripe") %>%
mutate(first = as.character(first),
individual = factor(individual,
levels = rev(c("2", "11", "31", "32", "33", "51", "55"))),
experiment = factor(
experiment, levels = rev(c("thick_stripe",
"thin_stripes",
"control")))) %>%
ggplot(aes(y = experiment, x = rank_trial, fill = first))+
geom_tile()+
scale_fill_manual(values = c("0" = "#e41a1c", "1" = "#4daf4a"),
breaks = c( "1","0"),
labels = c("Correct", "Incorrect"))+
scale_y_discrete(labels = c("Control", "Test"))+
labs(x = "Trial", y = "Experiment", fill = "First decision")+
facet_wrap(facets = "individual",  ncol = 1, scales = "free_y",
labeller = labeller(individual = ~ paste("Individual: ", .),
.multi_line = F))+
theme_bw()+
theme(legend.position = "top",
panel.grid = element_blank(),
axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14))
ggsave("optflow_tileplot_vg_version.png", plot = last_plot(), width = 6, height = 8, dpi = 300)
# first half of trials versus last half of trials ####
## we need a variable saying which trials are below half of the max and which are above
choices <- choices %>%
group_by(experiment) %>%
mutate(midpoint = ceiling(max(rank_trial) / 2))
# Create a new variable 'trial_half' based on trial_number and experiment
choices <- choices %>%
mutate(trial_half = ifelse(rank_trial <= midpoint, "first_half", "second_half"))
choices %>% group_by(experiment, trial_half, individual) %>%
summarise(proportion_correct = mean(first)) %>%
ggplot(aes(x = individual, y = proportion_correct, fill = trial_half))+
geom_bar(position="dodge", stat="identity")+
facet_wrap(facets = "experiment", ncol = 1)
# if we average over individuals it looks a bit cleaner.
choices %>% group_by(experiment, trial_half) %>%
summarise(proportion_correct = mean(first, na.rm = T)) %>%
ggplot(aes(x = trial_half, fill = trial_half, y = proportion_correct))+
geom_bar(position="dodge", stat="identity")+
facet_wrap(facets = "experiment", ncol = 1)
# To do:
## reorder experiments
## relabel experiments
# average decision accuracies across all trials ####
# overall decision accuracies. this is not a reflection of their optimal decision accuracy as it includes a learning phase and logistic regression seems to suggest there is an effect of trial number
# Calculate the proportion of correct decisions for each experiment
proportion_data <- choices %>%
group_by(experiment) %>%
summarise(proportion_correct = mean(first, na.rm = T),
n = n())
# Calculate the confidence intervals using broom::tidy
# confidence_intervals <- proportion_data %>%
#   mutate(se = sqrt(proportion_correct * (1 - proportion_correct) / n)) %>%
#   tidy(conf.int = TRUE, conf.method = "wald")
# Calculate the confidence intervals
alpha <- 0.95 # Confidence level
z_value <- qnorm((1 + alpha) / 2) # Z-value for confidence interval
proportion_data <- proportion_data %>%
mutate(se = sqrt(proportion_correct * (1 - proportion_correct) / n),
conf_interval = z_value * se)
### Create a bar / point plot with confidence intervals ####
# bar
ggplot(proportion_data, aes(x = experiment, y = proportion_correct)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
geom_errorbar(aes(ymin = proportion_correct - conf_interval, ymax = proportion_correct + conf_interval),
position = position_dodge(width = 0.8), width = 0.2) +
labs(x = "Experiment", y = "Proportion Correct") +
theme_minimal()
# point and errors
proportion_data %>% filter(experiment != "thick_stripe") %>%
ggplot(aes(x = experiment, y = proportion_correct)) +
geom_point(size = 3)+
geom_hline(yintercept = 0.5, lty = 2)+
scale_y_continuous(labels = scales::percent)+
geom_errorbar(aes(ymin = proportion_correct - conf_interval, ymax = proportion_correct + conf_interval),
position = position_dodge(width = 0.8), width = 0.2) +
labs(x = "Experiment", y = "Percent correct decisions") +
theme_minimal()+
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))+
scale_x_discrete(labels = c("Test", "Control", "Thick stripe"))
ggsave("optflow_point_and_errorbars.png", plot = last_plot(), width = 4, height = 3, dpi = 300)
# Chunk 5
# get rid of NAs in data so it plays nice with min and max functions.
# could also use na.rm = T in the functions, but NAs may cause problems anywhere
# need to look into NAs and remove / change them earlier.
### base plot effort ####
logit = function(x) log(x/(1-x))
invlogit = function(x) 1/(1+exp(-x))
# Fit logistic regression model for each experiment
m_thick <- glm(first ~ rank_trial,
data = choices[choices$experiment == "thick_stripe",],
family = binomial)
m_thin <- glm(first ~ rank_trial,
data = choices[choices$experiment == "thin_stripes",],
family = binomial)
m_ctrl <- glm(first ~ rank_trial,
data = choices[choices$experiment == "control",],
family = binomial)
# Summary of the model
summary(m_thick)
summary(m_thin)
summary(m_ctrl)
# thin stripe regression
pdf("my_base_plot.pdf", width = 8, height = 6)
thin_x_pred = with(choices[choices$experiment == "thin_stripes", ], seq(from=min(rank_trial), to=max(rank_trial), by=0.01))
with(choices[choices$experiment == "thin_stripes",],
plot(x = c(min(rank_trial), max(rank_trial)),
y = c(0, 1), type = "n", xlab = "Trial", ylab = "Predicted probability of correct decision"))
thin_predicted_probs <- predict(m_thin, newdata=list(rank_trial=thin_x_pred),  type = "response", se.fit = TRUE)
lines(thin_x_pred, thin_predicted_probs$fit)
polygon(c(thin_x_pred, rev(thin_x_pred)),
c(thin_predicted_probs$fit+1.96*thin_predicted_probs$se.fit,
rev(thin_predicted_probs$fit-1.96*thin_predicted_probs$se.fit)),
col = rgb(0,.3,1,.5), border = FALSE)
dev.off()
# thick
x_pred = with(choices[choices$experiment == "thick_stripe", ], seq(from=min(rank_trial), to=max(rank_trial), by=0.01))
with(choices[choices$experiment == "thick_stripe",],
plot(x = c(min(rank_trial), max(rank_trial)),
y = c(0, 1), type = "n", xlab = "Trial", ylab = "Predicted probability of correct decision"))
predicted_probs <- predict(m_thick, newdata=list(rank_trial=x_pred),  type = "response", se.fit = TRUE)
lines(x_pred, predicted_probs$fit)
polygon(c(x_pred, rev(x_pred)),
c(predicted_probs$fit+1.96*predicted_probs$se.fit,
rev(predicted_probs$fit-1.96*predicted_probs$se.fit)),
col = rgb(0,1,0,.5), border = FALSE)
# control
ctrl_x_pred = with(choices[choices$experiment == "control", ], seq(from=min(rank_trial), to=max(rank_trial), by=0.01))
with(choices[choices$experiment == "thick_stripe",],
plot(x = c(min(rank_trial), max(rank_trial)),
y = c(0, 1), type = "n", xlab = "Trial", ylab = "Predicted probability of correct decision"))
ctrl_predicted_probs <- predict(m_ctrl, newdata=list(rank_trial=ctrl_x_pred),  type = "response", se.fit = TRUE)
lines(ctrl_x_pred, ctrl_predicted_probs$fit)
polygon(c(ctrl_x_pred, rev(ctrl_x_pred)),
c(ctrl_predicted_probs$fit+1.96*ctrl_predicted_probs$se.fit,
rev(ctrl_predicted_probs$fit-1.96*ctrl_predicted_probs$se.fit)),
col = rgb(1,0,0,.5), border = FALSE)
rm(ctrl_x_pred, thin_x_pred, thin_predicted_probs, ctrl_predicted_probs,
predicted_probs, x_pred)
#### base plot proving to be a bit difficult, so moving back to ggplot ####
thick <- choices %>% filter(experiment == "thick_stripe")
thin <- choices %>% filter(experiment == "thin_stripes")
m_thick <- glm(first ~ rank_trial, data = thick, family = binomial)
m_thin <- glm(first ~ rank_trial, data = thin, family = binomial)
summary(m_thin)
thick$pred_prob <- predict(m_thick, type = "response")
thin$pred_prob <- predict(m_thin, type = "response")
combined_data <- bind_rows(#thick %>% select(first, rank_trial, pred_prob),
thin %>% select(first, rank_trial, pred_prob))
ggplot(combined_data, aes(x = rank_trial, y = pred_prob)) +
geom_smooth(method = "loess", se = FALSE) +
geom_smooth(method = "glm", method.args = list(family = binomial),
fill = "grey", colour = "black", alpha = 0.5) +
geom_hline(yintercept = 0.5, lty = 2)+
labs(x = "Trial", y = "Predicted Probability") +
theme_minimal()+
theme(axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14))
ggsave("optflow_log_reg_thin_stripes.png", plot = last_plot(), width = 5, height = 3, dpi = 300)
# visualize how proportion correct changes across trial ####
choices %>% filter(experiment == "thick_stripe") %>%
group_by(rank_trial, first) %>%
summarise(count = n()) %>%
group_by(rank_trial) %>%
mutate(proportion = count / sum(count),
first = as.character(first)) %>%
ggplot(aes(x = rank_trial, y = proportion, fill = first)) +
geom_col(position = "fill")+
geom_hline(yintercept = 0.5, lty = 2)+
scale_y_continuous(labels = scales::percent)+
scale_fill_manual(values = c("0" = "#e41a1c", "1" = "#4daf4a"),
breaks = c( "1","0"),
labels = c("Correct", "Incorrect"))+
labs(fill = "First decision", x = "Trial", y = "Percent of decisions correct / incorrect")+
theme_minimal()+
theme(axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))
ggsave("my_plot.png", plot = last_plot(), width = 10, height = 6, dpi = 300)
# first 10 versus last 10
# repeat for the relevant experiments
# some stats
# Tile plot ####
facet_labels <- c(thin_stripes = "multiple thin 45 degree stripes",
thick_stripe = "single thick stripe",
control = "control")
perp_para %>%
filter(individual %in% c("13", "51", "53")) %>%
mutate(first = as.character(first),
individual = factor(individual, levels =
rev(c("13", "51", "53"))),
stimuli = factor(stimuli, levels = rev(c("test","ctrl")))) %>%
ggplot(aes(y = stimuli, x = rank_trial, fill = first))+
geom_tile()+
facet_wrap(~ individual,  ncol = 1,
labeller = labeller(individual = ~ paste("Individual: ", .),
.multi_line = F),
scales = "free_y")+
labs(x = "Trial", y = "Experiment", fill = "Choice")+
scale_fill_manual(values = c("0" = "#e41a1c", "1" = "#4daf4a"),
breaks = c( "1","0"),
labels = c("Rewarding", "Unrewarding"))+
scale_y_discrete(labels = c("Control", "Test"))+
theme_bw()+
theme(panel.grid = element_blank(),
legend.position = "top",
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14))
ggsave("perppara_tileplot.png", plot = last_plot(), width = 6, height = 6, dpi = 300)
# point plot with confidence intervals ####
proportion_data <- perp_para %>%
group_by(stimuli) %>%
summarise(proportion_correct = mean(first, na.rm = T),
n = n())
# Calculate the confidence intervals
alpha <- 0.95 # Confidence level
z_value <- qnorm((1 + alpha) / 2) # Z-value for confidence interval
proportion_data <- proportion_data %>%
mutate(se = sqrt(proportion_correct * (1 - proportion_correct) / n),
conf_interval = z_value * se)
proportion_data %>%
mutate(stimuli = factor(stimuli, levels = c("test","ctrl"))) %>%
ggplot(aes(x = stimuli, y = proportion_correct)) +
geom_point(size = 3)+
geom_hline(yintercept = 0.5, lty = 2)+
scale_y_continuous(labels = scales::percent)+
scale_x_discrete(labels = c("Test", "Control"))+
geom_errorbar(aes(ymin = proportion_correct - conf_interval, ymax = proportion_correct + conf_interval),
position = position_dodge(width = 0.8), width = 0.2) +
labs(y = "Percent correct decisions") +
theme_minimal()+
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))+
ggsave("perppara_point_and_errorbars.png", plot = last_plot(), width = 3, height = 3, dpi = 300)
ggsave("perppara_tileplot.png", plot = last_plot(), width = 6, height = 6, dpi = 300)
perp_para %>%
filter(individual %in% c("13", "51", "53")) %>%
mutate(first = as.character(first),
individual = factor(individual, levels =
rev(c("13", "51", "53"))),
stimuli = factor(stimuli, levels = rev(c("test","ctrl")))) %>%
ggplot(aes(y = stimuli, x = rank_trial, fill = first))+
geom_tile()+
facet_wrap(~ individual,  ncol = 1,
labeller = labeller(individual = ~ paste("Individual: ", .),
.multi_line = F),
scales = "free_y")+
labs(x = "Trial", y = "Experiment", fill = "Choice")+
scale_fill_manual(values = c("0" = "#e41a1c", "1" = "#4daf4a"),
breaks = c( "1","0"),
labels = c("Rewarding", "Unrewarding"))+
scale_y_discrete(labels = c("Control", "Test"))+
theme_bw()+
theme(panel.grid = element_blank(),
legend.position = "top",
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14))
ggsave("perppara_tileplot.png", plot = last_plot(), width = 6, height = 6, dpi = 300)
